package com.liri.reference.common.constants;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * GC常量
 *
 * @author William
 * @date 2019/8/19
 */
public final class GlobalCollectConstants {

    private static Logger logger = LoggerFactory.getLogger(GlobalCollectConstants.class);

    private GlobalCollectConstants() {

    }
 
    /**
     * Global Collect URL 查询 "DICT_ITEM"."DictClassCode" 条件
     **/
    public static final String DICT_CLASS_REF = "DICT_CLASS_REF";

    /**
     * Global Collect URL 查询 "DICT_ITEM"."DictItemCode" 条件
     **/
    public static final String DICT_ITEM_GC_URL = "GC_URL";

    /**
     * global collect function type code
     **/
    public static final String FUNCTION_TYPE_CODE = "124";

    /**
     * 测试环境URL
     **/
    public static final String STAGING_URL = "https://ps.gcsip.nl/wdl/wdl";

    /**
     * 生产环境URL
     **/
    public static final String PRODUCTION_URL = "https://ps.gcsip.com/wdl/wdl";

    /**
     * xml
     **/
    public static final String KEY_XML = "XML";

    /**
     * request
     **/
    public static final String KEY_REQUEST = "REQUEST";

    /**
     * action:INSERT_ORDERWITHPAYMENT
     **/
    public static final String KEY_ACTION = "ACTION";

    /**
     * meta
     **/
    public static final String KEY_META = "META";

    // >>>>>> Start META
    /**
     * 商户ID = 8054
     * <p>
     * Merchant identifier (provided by Ingenico ePayments)
     **/
    public static final String KEY_MERCHANT_ID = "MERCHANTID";

    /**
     * IP address of merchant server:10.0.0.198
     **/
    public static final String KEY_IP_ADDRESS = "IPADDRESS";

    /**
     * Version of interface:2.0
     **/
    public static final String KEY_VERSION = "VERSION";

    // <<<<<< End META

    /**
     * params
     **/
    public static final String KEY_PARAMS = "PARAMS";

    /**
     * order
     **/
    public static final String KEY_ORDER = "ORDER";

    // Start order
    /**
     * Order ID generated by the merchant:1234567899
     **/
    public static final String KEY_ORDER_ID = "ORDERID";

    /**
     * 订单类型
     * <p>
     * 1 = Normal order (default)
     **/
    public static final String KEY_ORDER_TYPE = "ORDERTYPE";

    /**
     * 订单金额(Amount of the order in cents):29990 (=299.90)
     **/
    public static final String KEY_AMOUNT = "AMOUNT";

    /**
     * 币种代码:USD
     **/
    public static final String KEY_CURRENCY_CODE = "CURRENCYCODE";

    /**
     * 语言代码:en
     **/
    public static final String KEY_LANGUAGE_CODE = "LANGUAGECODE";

    /**
     * 国家代码:US
     **/
    public static final String KEY_COUNTRY_CODE = "COUNTRYCODE";

    /**
     * 用户编号
     **/
    public static final String KEY_CUSTOMER_ID = "CUSTOMERID";

    /**
     * 用户名
     **/
    public static final String KEY_FIRST_NAME = "FIRSTNAME";

    /**
     * 用户姓氏
     **/
    public static final String KEY_SURNAME = "SURNAME";

    /**
     * 商家付款的唯一参考
     **/
    public static final String KEY_MERCHANT_REFERENCE = "MERCHANTREFERENCE";

    /**
     * 公司(法人)名称
     **/
    public static final String KEY_COMPANY_NAME = "COMPANYNAME";

    // <<<<<< End order

    // >>>>>> Start payment
    /**
     * payment
     **/
    public static final String KEY_PAYMENT = "PAYMENT";
    /**
     * 付款产品ID
     **/
    public static final String KEY_PAYMENT_PRODUCT_ID = "PAYMENTPRODUCTID";

    /**
     * 支付的金额 (Amount of the order in cents):29990 (=299.90)
     **/
    public static final String KEY_PAYMENT_AMOUNT = "AMOUNT";

    /**
     * 支付的币种代码:USD
     **/
    public static final String KEY_PAYMENT_CURRENCY_CODE = "CURRENCYCODE";

    /**
     * 支付的语言代码:en
     **/
    public static final String KEY_PAYMENT_LANGUAGE_CODE = "LANGUAGECODE";

    /**
     * 支付的国家代码:US
     **/
    public static final String KEY_PAYMENT_COUNTRY_CODE = "COUNTRYCODE";

    /**
     * 0=Do not use HostedMerchantLink
     * <p>
     * 1=Use HostedMerchantLink (default if configured)
     **/
    public static final String KEY_PAYMENT_HOSTED_INDICATOR = "HOSTEDINDICATOR";

    /**
     * 用于在交易完成后将消费者返回到商户的站点,用于重定向支付或HostedMerchantLink
     **/
    public static final String KEY_PAYMENT_RETURN_URL = "RETURNURL";
    // <<<<<< End payment

    /**
     * fraud fields
     **/
    public static final String KEY_FRAUD_FIELDS = "FRAUDFIELDS";

    /**
     * ebt_user_data1
     **/
    public static final String KEY_EBT_USER_DATA1 = "EBT_USER_DATA1";

    // >>>>>> Start response
    /**
     * response
     **/
    public static final String KEY_RESPONSE = "RESPONSE";

    /**
     * 响应状态
     * <p>
     * 接收到消息并成功处理 - OK
     * <p>
     * 消息已收到，但未被接受 - NOK
     **/
    public static final String KEY_RESPONSE_RESULT = "RESULT";

    // >>>>>> Start row
    /**
     * row
     **/
    public static final String KEY_RESPONSE_ROW = "ROW";

    /**
     * return MAC
     **/
    public static final String KEY_RESPONSE_ROW_RETURNMAC = "RETURNMAC";

    /**
     * merchant id
     **/
    public static final String KEY_RESPONSE_ROW_MERCHANT_ID = "MERCHANTID";

    /**
     * IBAN
     **/
    public static final String KEY_RESPONSE_ROW_IBAN = "IBAN";

    /**
     * bank name
     **/
    public static final String KEY_RESPONSE_ROW_BANK_NAME = "BANKNAME";

    /**
     * bank account number
     **/
    public static final String KEY_RESPONSE_ROW_BANK_ACCOUNT_NUMBER = "BANKACCOUNTNUMBER";

    /**
     * attempt id
     **/
    public static final String KEY_RESPONSE_ROW_ATTEMPT_ID = "ATTEMPTID";

    /**
     * form method
     **/
    public static final String KEY_RESPONSE_ROW_FORM_METHOD = "FORMMETHOD";

    /**
     * country description
     **/
    public static final String KEY_RESPONSE_ROW_COUNTRY_DESCRIPTION = "COUNTRYDESCRIPTION";

    /**
     * MAC
     **/
    public static final String KEY_RESPONSE_ROW_MAC = "MAC";

    /**
     * payment reference
     **/
    public static final String KEY_RESPONSE_ROW_PAYMENT_REFERENCE = "PAYMENTREFERENCE";

    /**
     * swift code
     **/
    public static final String KEY_RESPONSE_ROW_SWIFT_CODE = "SWIFTCODE";

    /**
     * form action
     **/
    public static final String KEY_RESPONSE_ROW_FORM_ACTION = "FORMACTION";

    /**
     * order id
     **/
    public static final String KEY_RESPONSE_ROW_ORDER_ID = "ORDERID";

    /**
     * REF
     **/
    public static final String KEY_RESPONSE_ROW_REF = "REF";

    /**
     * status id
     **/
    public static final String KEY_RESPONSE_ROW_STATUS_ID = "STATUSID";

    /**
     * city
     **/
    public static final String KEY_RESPONSE_ROW_CITY = "CITY";

    /**
     * account holder
     **/
    public static final String KEY_RESPONSE_ROW_ACCOUNT_HOLDER = "ACCOUNTHOLDER";

    /**
     * status date
     **/
    public static final String KEY_RESPONSE_ROW_STATUS_DATE = "STATUSDATE";

    /**
     * additional reference
     **/
    public static final String KEY_RESPONSE_ROW_ADDITIONAL_REFERENCE = "ADDITIONALREFERENCE";

    /**
     * external reference
     **/
    public static final String KEY_RESPONSE_ROW_EXTERNAL_REFERENCE = "EXTERNALREFERENCE";

    /**
     * effort id
     **/
    public static final String KEY_RESPONSE_ROW_EFFORT_ID = "EFFORTID";

    /**
     * special id
     **/
    public static final String KEY_RESPONSE_ROW_SPECIAL_ID = "SPECIALID";

    // <<<<<< End row

    /**
     * error
     **/
    public static final String KEY_RESPONSE_ERROR = "ERROR";

    /**
     * error code
     **/
    public static final String KEY_RESPONSE_ERROR_CODE = "CODE";

    /**
     * error message
     **/
    public static final String KEY_RESPONSE_ERROR_MESSAGE = "MESSAGE";
    // <<<<<< End response

    /**
     * OK
     **/
    public static final String OK = "OK";

    /**
     * 参数配置
     **/
    public static final Map<String, String> CONFIG = new HashMap<String, String>();

    /**
     * 五大币种:"EUR", "USD", "CZK", "GBP", "JPY"
     **/
    public static final List<String> MASTER_CURRENCY = Arrays
            .asList(new String[]{"EUR", "USD", "CZK", "GBP", "JPY"});

    /**
     * 币种最大限制
     **/
    public static final Map<String, BigDecimal> CURRENCY_MAX_LIMIT = new HashMap<String, BigDecimal>();

    /**
     * 币种最小限制
     **/
    public static final Map<String, BigDecimal> CURRENCY_MIN_LIMIT = new HashMap<String, BigDecimal>();

    static {

        // 参数配置
        CONFIG.put(KEY_ACTION, "INSERT_ORDERWITHPAYMENT");
        CONFIG.put(KEY_MERCHANT_ID, "8054");
        CONFIG.put(KEY_VERSION, "2.0");
        CONFIG.put(KEY_ORDER_TYPE, "1");
        CONFIG.put(KEY_LANGUAGE_CODE, "en");
        CONFIG.put(KEY_PAYMENT_LANGUAGE_CODE, "en");
        CONFIG.put(KEY_PAYMENT_PRODUCT_ID, "11");
        CONFIG.put(KEY_PAYMENT_HOSTED_INDICATOR, "1");
        CONFIG.put(KEY_PAYMENT_RETURN_URL, "http://www.globalcollect.com/");
        CONFIG.put(KEY_EBT_USER_DATA1, "TFTrader");

        try {
            String ip = InetAddress.getLocalHost().getHostAddress();
            CONFIG.put(KEY_IP_ADDRESS, ip);
        } catch (UnknownHostException e) {
            logger.error("****** CreatXML UnknownHostException:", e);
        }

        // >>>>>> Start currencyMaxLimit
        CURRENCY_MAX_LIMIT.put("JPY", new BigDecimal(1000000));
        CURRENCY_MAX_LIMIT.put("USD", new BigDecimal(10000));
        CURRENCY_MAX_LIMIT.put("ZBR", new BigDecimal(100000));
        CURRENCY_MAX_LIMIT.put("NZD", new BigDecimal(17000));
        CURRENCY_MAX_LIMIT.put("SGD", new BigDecimal(15000));
        CURRENCY_MAX_LIMIT.put("CHF", new BigDecimal(10000));
        CURRENCY_MAX_LIMIT.put("HKD", new BigDecimal(80000));
        CURRENCY_MAX_LIMIT.put("TWD", new BigDecimal(350000));
        CURRENCY_MAX_LIMIT.put("EUR", new BigDecimal(10000));
        CURRENCY_MAX_LIMIT.put("AUD", new BigDecimal(15000));
        CURRENCY_MAX_LIMIT.put("NOK", new BigDecimal(90000));
        CURRENCY_MAX_LIMIT.put("GBP", new BigDecimal(7000));
        CURRENCY_MAX_LIMIT.put("RUB", new BigDecimal(700000));
        CURRENCY_MAX_LIMIT.put("THB", new BigDecimal(370000));
        CURRENCY_MAX_LIMIT.put("MYR", new BigDecimal(46000));
        CURRENCY_MAX_LIMIT.put("IDR", new BigDecimal(140000000));
        CURRENCY_MAX_LIMIT.put("PHP", new BigDecimal(500000));
        CURRENCY_MAX_LIMIT.put("CZK", new BigDecimal(200000));
        CURRENCY_MAX_LIMIT.put("BGN", new BigDecimal(20000));
        CURRENCY_MAX_LIMIT.put("BRL", new BigDecimal(40000));
        CURRENCY_MAX_LIMIT.put("CNY", new BigDecimal(50000));
        CURRENCY_MAX_LIMIT.put("CAD", new BigDecimal(15000));
        CURRENCY_MAX_LIMIT.put("COP", new BigDecimal(30000000));
        CURRENCY_MAX_LIMIT.put("DKK", new BigDecimal(60000));
        CURRENCY_MAX_LIMIT.put("HRK", new BigDecimal(60000));
        CURRENCY_MAX_LIMIT.put("KWD", new BigDecimal(3000));
        CURRENCY_MAX_LIMIT.put("BHD", new BigDecimal(4000));
        CURRENCY_MAX_LIMIT.put("ARS", new BigDecimal(30000));
        CURRENCY_MAX_LIMIT.put("PLN", new BigDecimal(40000));
        CURRENCY_MAX_LIMIT.put("QAR", new BigDecimal(40000));
        CURRENCY_MAX_LIMIT.put("SEK", new BigDecimal(100000));
        CURRENCY_MAX_LIMIT.put("TRY", new BigDecimal(50000));
        CURRENCY_MAX_LIMIT.put("ZAR", new BigDecimal(150000));
        CURRENCY_MAX_LIMIT.put("RON", new BigDecimal(50000));
        // <<<<<< End currencyMaxLimit

        // >>>>>> Start currencyMinLimit
        CURRENCY_MIN_LIMIT.put("JPY", new BigDecimal(100));
        CURRENCY_MIN_LIMIT.put("USD", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("ZBR", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("NZD", new BigDecimal(1.5));
        CURRENCY_MIN_LIMIT.put("SGD", new BigDecimal(1.5));
        CURRENCY_MIN_LIMIT.put("CHF", new BigDecimal(6));
        CURRENCY_MIN_LIMIT.put("HKD", new BigDecimal(8));
        CURRENCY_MIN_LIMIT.put("TWD", new BigDecimal(35));
        CURRENCY_MIN_LIMIT.put("EUR", new BigDecimal(1));
        CURRENCY_MIN_LIMIT.put("AUD", new BigDecimal(1.5));
        CURRENCY_MIN_LIMIT.put("NOK", new BigDecimal(9));
        CURRENCY_MIN_LIMIT.put("GBP", new BigDecimal(1));
        CURRENCY_MIN_LIMIT.put("RUB", new BigDecimal(70));
        CURRENCY_MIN_LIMIT.put("THB", new BigDecimal(30));
        CURRENCY_MIN_LIMIT.put("MYR", new BigDecimal(4));
        CURRENCY_MIN_LIMIT.put("IDR", new BigDecimal(12000));
        CURRENCY_MIN_LIMIT.put("PHP", new BigDecimal(50));
        CURRENCY_MIN_LIMIT.put("CZK", new BigDecimal(200));
        CURRENCY_MIN_LIMIT.put("BGN", new BigDecimal(20));
        CURRENCY_MIN_LIMIT.put("BRL", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("CNY", new BigDecimal(50));
        CURRENCY_MIN_LIMIT.put("CAD", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("COP", new BigDecimal(30000));
        CURRENCY_MIN_LIMIT.put("DKK", new BigDecimal(100));
        CURRENCY_MIN_LIMIT.put("HRK", new BigDecimal(100));
        CURRENCY_MIN_LIMIT.put("KWD", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("BHD", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("ARS", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("PLN", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("QAR", new BigDecimal(10));
        CURRENCY_MIN_LIMIT.put("SEK", new BigDecimal(100));
        CURRENCY_MIN_LIMIT.put("TRY", new BigDecimal(50));
        CURRENCY_MIN_LIMIT.put("ZAR", new BigDecimal(150));
        CURRENCY_MIN_LIMIT.put("RON", new BigDecimal(50));
        // <<<<<< End currencyMinLimit

    }

}
